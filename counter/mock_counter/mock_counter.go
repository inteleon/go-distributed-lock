// Code generated by MockGen. DO NOT EDIT.
// Source: counter/counter.go

// Package mock_counter is a generated GoMock package.
package mock_counter

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDistCounter is a mock of DistCounter interface
type MockDistCounter struct {
	ctrl     *gomock.Controller
	recorder *MockDistCounterMockRecorder
}

// MockDistCounterMockRecorder is the mock recorder for MockDistCounter
type MockDistCounterMockRecorder struct {
	mock *MockDistCounter
}

// NewMockDistCounter creates a new mock instance
func NewMockDistCounter(ctrl *gomock.Controller) *MockDistCounter {
	mock := &MockDistCounter{ctrl: ctrl}
	mock.recorder = &MockDistCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDistCounter) EXPECT() *MockDistCounterMockRecorder {
	return m.recorder
}

// IsLocked mocks base method
func (m *MockDistCounter) IsLocked() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLocked")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLocked indicates an expected call of IsLocked
func (mr *MockDistCounterMockRecorder) IsLocked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLocked", reflect.TypeOf((*MockDistCounter)(nil).IsLocked))
}

// Decr mocks base method
func (m *MockDistCounter) Decr() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Decr")
}

// Decr indicates an expected call of Decr
func (mr *MockDistCounterMockRecorder) Decr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockDistCounter)(nil).Decr))
}

// Set mocks base method
func (m *MockDistCounter) Set(count int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", count)
}

// Set indicates an expected call of Set
func (mr *MockDistCounterMockRecorder) Set(count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockDistCounter)(nil).Set), count)
}

// Get mocks base method
func (m *MockDistCounter) Get() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockDistCounterMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDistCounter)(nil).Get))
}

// Close mocks base method
func (m *MockDistCounter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDistCounterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDistCounter)(nil).Close))
}
