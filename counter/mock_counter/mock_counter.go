// Code generated by MockGen. DO NOT EDIT.
// Source: counter/counter.go

// Package mock_counter is a generated GoMock package.
package mock_counter

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCounter is a mock of Counter interface
type MockCounter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterMockRecorder
}

// MockCounterMockRecorder is the mock recorder for MockCounter
type MockCounterMockRecorder struct {
	mock *MockCounter
}

// NewMockCounter creates a new mock instance
func NewMockCounter(ctrl *gomock.Controller) *MockCounter {
	mock := &MockCounter{ctrl: ctrl}
	mock.recorder = &MockCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCounter) EXPECT() *MockCounterMockRecorder {
	return m.recorder
}

// IsLocked mocks base method
func (m *MockCounter) IsLocked() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLocked")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLocked indicates an expected call of IsLocked
func (mr *MockCounterMockRecorder) IsLocked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLocked", reflect.TypeOf((*MockCounter)(nil).IsLocked))
}

// Decr mocks base method
func (m *MockCounter) Decr() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Decr")
}

// Decr indicates an expected call of Decr
func (mr *MockCounterMockRecorder) Decr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockCounter)(nil).Decr))
}

// Set mocks base method
func (m *MockCounter) Set(count int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", count)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockCounterMockRecorder) Set(count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCounter)(nil).Set), count)
}

// Get mocks base method
func (m *MockCounter) Get() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockCounterMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCounter)(nil).Get))
}

// Close mocks base method
func (m *MockCounter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockCounterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCounter)(nil).Close))
}
